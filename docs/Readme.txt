This zip file contains the following subdirectories:

Basm:
Contains the source files for the client RISC processors (Master.s for core 1 and Slave.s for cores 2..nCores),
the SimpleRisc used in the Ethernet controller (riscTest.s), and the block copy unit (CopyUnit.s).
It also contains the manual for the Basm assembler.
The number of processor cores instantiated is controlled by the parameter "nCores" in RISCtop.v.

Copiersrc:
Contains the source files (.v) for the block copy unit.

DDRsrc:
Contains the source files (.v) for the DDR controller.

doc:
Contains a pdf description of the system. It is a good idea to
read this document before trying to build or use the system, since
it contains information not contained here.

ETHERsrc:
Contains the source files (.v) for the Ethernet controller.

Impact:
Contains files for the compact flash card on the XUPv5.  It
is updated by the Xilinx "Impact" tool. The CF file is "rev0.ace".

mem:
Contains two Xilinx .bmm files. memX3.bmm is for a 3-core design,
memX13.bmm is for a 13-core system.  The 3 core version builds faster
and is useful if hardware changes are being debugged.  The 3-core version is the 
design that is built with the current project settings.  It includes
a number of ChipScope probes to see internal signals.  If this is not
needed, remove "RISC.cdc" from the ISE project.


RISC:
The ISE working directory.  The project to build the design
is "RISC.xise".

RISCsrc:
Contains the source (.v) files for the RISC processor.

scripts:
Contains three scripts to patch the bit files. Make13a.cmd
is for the 13-processor version, Make3a.cmd is for the 3-processor version,
and Make5a.cmd is for the 5-processor version.

The patching script must know the location at which the tools placed the
block rams that contain code and data.  This information is communicated to
the Xilinx data2mem program by a file generated as part of the build process.
The ISE reads a file called memX3a.bm (or memx5a.bmm or memX13a.bm) in the mem directory,and writes a file named memX3a_bd.bmm
that contains the ram locations.  The file that should be used (based on the number
of cores to be generated) is communicated to the ISE by setting the map option -bm ..\mem\memX3a.bmm.
This is done by right-clicking on "Implement Design" in the ISE and selecting "Process Properties".
The setting is under "Other ngdbuild Command Line Options".  For a given configuration, you must
coordinate:
(a) The nCores parameter in RiscTop.v,
(b) The .bmm file used by the tools, and
(c) The patching script used when the tools have built the design.

TinyASM:
Contains the source code for the TC5 processor (TestTC5.txt), and a Visual Studio solution to build the assembler (TC4asm.exe) if needed.

Readme.txt: This file.

risc.bit:
The bitstream file.

The XUPv5RingV2 directory should be located in C:\ of the machine used to build the controller.
This avoids problems with absolute path names in the various tools used.

 
The system is built using the Xilinx ISE version 11.3.  Chipscope may be used for debugging if needed.
The controller is built using only the ISE.
Using a different synthesizer might result in a faster or smaller design, but we have not done this (yet).

The ISE project has been "cleaned" to reduce the size of the zip file.
To build it, start the ISE, open the "RISC.xise" project and double-click on "Generate Programming File".
When the programming file has been generated, run the "Make3" script (in the scripts directory) to assemble the initial contents of
the processor memories and patch the bitstream.  This generates "risc.bit" in the top-level directory.  This can be loaded
into the FPGA using Impact or Chipscope.  Impact can also be used to generate a file for the Compact Flash card supplied with the XUPv5.
If you use this feature, the CF should contain a single file, the so-called ".ace" file generated by Impact.  The more complicated
file system advocated by Xilinx, which includes the file "Xilinx.sys", does not seem to work.

Before using the system on a real network, you will need to place a valid Ethernet MAC address in the EEPROM contained on the
XUPv5 board. The Beehive manual describes how to do this.

Also, if you want to download images produced by the Apiary tools, you will need to run a TFTP server containing the image
file, as described in the Beehive documentation. 


